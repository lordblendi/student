{
  "name": "msx",
  "version": "0.4.1",
  "description": "JSX for Mithril",
  "main": "main.js",
  "dependencies": {
    "commoner": "^0.10.0",
    "jstransform": "^10.1.0"
  },
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-plumber": "^1.0.0",
    "gulp-util": "^3.0.4",
    "tape": "^4.0.0",
    "through2": "^0.6.5"
  },
  "keywords": [
    "jsx",
    "mithril"
  ],
  "author": {
    "name": "Jonathan Buchanan",
    "email": "jonathan.buchanan@gmail.com",
    "url": "https://github.com/insin"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/insin/msx.git"
  },
  "licenses": [
    {
      "type": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "scripts": {
    "test": "node test/tests.js"
  },
  "bin": {
    "msx": "./bin/msx"
  },
  "readme": "# MSX [![Build Status](https://secure.travis-ci.org/insin/msx.png?branch=master)](http://travis-ci.org/insin/msx)\n\n*MSX is based on version 0.13.2 of React's JSX Transformer*\n\nMSX tweaks [React](http://facebook.github.io/react/)'s JSX Transformer to output\ncontents compatible with [Mithril](http://lhorie.github.io/mithril/)'s\n`m.render()` function, allowing you to use HTML-like syntax in your Mithril\nview code, like this:\n\n```html\nvar todos = ctrl.list.map(function(task, index) {\n  return <li className={task.completed() && 'completed'}>\n    <div className=\"view\">\n      <input\n        className=\"toggle\"\n        type=\"checkbox\"\n        onclick={m.withAttr('checked', task.completed)}\n        checked={task.completed()}\n      />\n      <label>{task.title()}</label>\n      <button className=\"destroy\" onclick={ctrl.remove.bind(ctrl, index)}/>\n    </div>\n    <input className=\"edit\"/>\n  </li>\n})\n```\n\n## HTML tags and custom elements\n\nFor tag names which look like HTML elements or custom elements (lowercase,\noptionally containing hyphens), raw virtual DOM objects - matching the\n[`VirtualElement` signature](http://lhorie.github.io/mithril/mithril.render.html#signature)\naccepted by `m.render()` - will be generated by default.\n\n_Input:_\n\n```html\n<div id=\"example\">\n  <h1>Test</h1>\n  <my-element name=\"test\"/>\n</div>\n```\n\n_Output:_\n\n```javascript\n{tag: \"div\", attrs: {id:\"example\"}, children: [\n  {tag: \"h1\", attrs: {}, children: [\"Test\"]},\n  {tag: \"my-element\", attrs: {name:\"test\"}}\n]}\n```\n\nThis effectively [precompiles](http://lhorie.github.io/mithril/optimizing-performance.html)\nyour view code for a slight performance tweak.\n\n## Mithril components\n\nOtherwise, it's assumed a tag name is a reference to an in-scope variable which\nis a [Mithril component](http://lhorie.github.io/mithril/components.html).\n\nPassing attributes or children to a component will generate a call to Mithril's\n[`m.component()`](http://lhorie.github.io/mithril/mithril.component.html)\nfunction, with children always being passed as an Array:\n\n_Input:_\n\n```html\n<form>\n  {/* Bare component */}\n  <Uploader/>\n  {/* Component with attributes */}\n  <Uploader onchange={ctrl.files}/>\n  {/* Component with attributes and children */}\n  <Uploader onchange={ctrl.files}>\n    {ctrl.files().map(file => <File {...file}/>)}\n  </Uploader>\n  <button type=\"button\" onclick={ctrl.save}>Upload</button>\n</form>\n```\n\n_Output:_\n\n```javascript\n{tag: \"form\", attrs: {}, children: [\n  /* Bare component */\n  Uploader,\n  /* Component with attributes */\n  m.component(Uploader, {onchange:ctrl.files}),\n  /* Component with attributes and children */\n  m.component(Uploader, {onchange:ctrl.files}, [\n    ctrl.files().map(function(file)  {return m.component(File, Object.assign({},  file));})\n  ]),\n  {tag: \"button\", attrs: {type:\"button\", onclick:ctrl.save}, children: [\"Upload\"]}\n]}\n```\n\nMSX assumes your component's (optional) `controller()` and (required) `view()`\nfunctions have the following signatures, where `attributes` is an `Object` and\n`children` is an `Array`:\n\n```javascript\ncontroller([attributes[, children]])\nview(ctrl[, attributes[, children]])\n```\n\nAs such, if a component has children but no attributes, an empty attributes\nobject will still be passed:\n\n_Input:_\n\n```html\n<Field>\n  <input onchange={m.withAttr('value', ctrl.description)} value={ctrl.description()}/>\n</Field>\n```\n\n_Output:_\n\n```javascript\nm.component(Field, {}, [\n  {tag: \"input\", attrs: {onchange:m.withAttr('value', ctrl.description), value:ctrl.description()}}\n])\n```\n\n## JSX spread attributes and `Object.assign()`\n\nIf you make use of [JSX Spread Attributes](http://facebook.github.io/react/docs/jsx-spread.html),\nthe resulting code will make use of `Object.assign()` to merge attributes - if\nyour code needs to run in environments which don't implement `Object.assign()`\nnatively, you're responsible for ensuring it's available via a\n[shim](https://github.com/ljharb/object.assign), or otherwise.\n\nOther than that, the rest of React's JSX documentation should still apply:\n\n* [JSX in Depth](http://facebook.github.io/react/docs/jsx-in-depth.html)\n* [JSX Spread Attributes](http://facebook.github.io/react/docs/jsx-spread.html)\n* [JSX Gotchas](http://facebook.github.io/react/docs/jsx-gotchas.html) - with\n  the exception of `dangerouslySetInnerHTML`: use\n  [`m.trust()`](http://lhorie.github.io/mithril/mithril.trust.html) on contents\n  instead.\n* [If-Else in JSX](http://facebook.github.io/react/tips/if-else-in-JSX.html)\n\n## In-browser JSX Transform\n\nFor development and quick prototyping, an in-browser MSX transform is available.\n\nDownload or use it directly from cdn.rawgit.com:\n\n* https://cdn.rawgit.com/insin/msx/master/dist/MSXTransformer.js\n\nInclude a `<script type=\"text/msx\">` tag to engage the MSX transformer.\n\nTo enable ES6 transforms, use `<script type=\"text/msx;harmony=true\">`. Check out\nthe [source](https://github.com/insin/msx/blob/master/demo/index.html) of the\n[live example of using in-browser JSX + ES6 transforms](http://insin.github.io/msx/).\n\nHere's a handy template you can use:\n\n```html\n<meta charset=\"UTF-8\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/mithril/0.2.0/mithril.js\"></script>\n<script src=\"https://cdn.rawgit.com/insin/msx/master/dist/MSXTransformer.js\"></script>\n<div id=\"app\"></div>\n<script type=\"text/msx;harmony=true\">void function() { 'use strict';\n\nvar Hello = {\n  controller() {\n    this.who = m.prop('World')\n  },\n\n  view(ctrl) {\n    return <h1>Hello {ctrl.who()}!</h1>\n  }\n}\n\nm.mount(document.getElementById('app'), Hello)\n\n}()</script>\n```\n\n## Command Line Usage\n\n```\nnpm install -g msx\n```\n\n```\nmsx --watch src/ build/\n```\n\nTo disable precompilation from the command line, pass a `--no-precompile` flag.\n\nRun `msx --help` for more information.\n\n## Module Usage\n\n```\nnpm install msx\n```\n\n```javascript\nvar msx = require('msx')\n```\n\n### Module API\n\n#### `msx.transform(source: String[, options: Object])`\n\nTransforms XML-like syntax in the given source into object literals compatible\nwith Mithril's `m.render()` function, or to function calls using Mithril's\n`m()` function, returning the transformed source.\n\nTo enable [ES6 transforms supported by JSX Transformer](http://kangax.github.io/compat-table/es6/#jsx),\npass a `harmony` option:\n\n```javascript\nmsx.transform(source, {harmony: true})\n```\n\nTo disable default precompilation and always output `m()` calls, pass a\n`precompile` option:\n\n```javascript\nmsx.transform(source, {precompile: false})\n```\n\n## Examples\n\nExample inputs (using some ES6 features) and outputs are in\n[test/jsx](https://github.com/insin/msx/tree/master/test/jsx) and\n[test/js](https://github.com/insin/msx/tree/master/test/js), respectively.\n\nAn example [gulpfile.js](https://github.com/insin/msx/blob/master/gulpfile.js)\nis provided, which implements an `msxTransform()` step using `msx.transform()`.\n\n## Related Modules\n\n* [gulp-msx](https://github.com/insin/gulp-msx) - gulp plugin.\n* [grunt-msx](https://github.com/hung-phan/grunt-msx) - grunt plugin.\n* [mithrilify](https://github.com/sectore/mithrilify) - browserify transform.\n* [msx-loader](https://github.com/sdemjanenko/msx-loader) - webpack loader.\n\n## MIT Licensed\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/insin/msx/issues"
  },
  "_id": "msx@0.4.1",
  "_from": "msx@~0.4.1"
}
